import React from "react";
import { useTable, useSortBy, useGlobalFilter } from "react-table";
import { ColumnFilter } from "./ColumnFilter";
import { TableButtons } from "./TableButtons";

export function Table(props) {

  /* –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ: */
  const data = React.useMemo(
    () => [
      ...props.clients.map(client => {
        return {
          id: client.id,
          name: `${client.surname} ${client.name} ${client.lastName}`,
          createdAt: `${client.createdAt.slice(8, 10)}.${client.createdAt.slice(5, 7)}.${client.createdAt.slice(0, 4)} ${client.createdAt.slice(11, 13)}:${client.createdAt.slice(14, 16)}`,
          editedAt: `${client.updatedAt.slice(8, 10)}.${client.updatedAt.slice(5, 7)}.${client.updatedAt.slice(0, 4)} ${client.updatedAt.slice(11, 13)}:${client.updatedAt.slice(14, 16)}`,
        }
      })
    ],
    [props.clients]
  )

  /* –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ç–∞–±–ª–∏—Ü—ã: */
  const columns = React.useMemo(
    () => [
      {
        Header: 'ID',
        accessor: 'id',
        Cell: ({ cell }) =>
          <span style={{ color: "#B0B0B0" }}>
            {cell.row.values.id}
          </span>
      },
      {
        Header: '–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ',
        accessor: 'name'
      },
      {
        Header: '–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è',
        accessor: 'createdAt',
        Cell: ({ cell }) =>
          <span style={{ color: "#B0B0B0" }}>
            {cell.row.values.createdAt}
          </span>
      },
      {
        Header: '–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è',
        accessor: 'editedAt'
      },
      /* –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∫–æ–ª–æ–Ω–∫—É –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤, –∫–æ–≥–¥–∞ –æ–Ω–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è: */
      // {
      //   Header: '–ö–æ–Ω—Ç–∞–∫—Ç—ã',
      //   accessor: 'contacts',
      //   disableSortBy: true,
      // },
      {
        Header: '–î–µ–π—Å—Ç–≤–∏—è',
        accessor: 'actions',
        disableSortBy: true,
        Cell: ({ cell }) => (
          <TableButtons
            toggleModal={props.toggleModal}
            toggleDeleteModal={props.toggleDeleteModal}
            id={cell.row.values.id}
            getId={props.getId}
          />
        )
      },
    ],
    [props.toggleModal, props.toggleDeleteModal, props.getId]
  )

  /* –ó–∞–¥–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç–∞–±–ª–∏—Ü—ã: */
  const {
    getTableProps,
    getTableBodyProps,
    headerGroups,
    rows,
    prepareRow,
    state,
    setGlobalFilter,
  } = useTable(
    {
      columns,
      data,
    },
    useGlobalFilter,
    useSortBy,
  )

  const { globalFilter } = state

  return (
    <>
      <ColumnFilter
        filter={globalFilter}
        setFilter={setGlobalFilter}
        inputData={props.inputData}
      />
      <table className="clients__container" {...getTableProps()}>
        <thead>
          {headerGroups.map(headerGroup => (
            <tr {...headerGroup.getHeaderGroupProps()}>
              {headerGroup.headers.map(column => (
                /* –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –Ω–∞–∂–∞—Ç–∏—é: */
                <th {...column.getHeaderProps(column.getSortByToggleProps({ title: undefined }))}>
                  {column.render('Header')}
                  {/* –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–µ–ª–æ—á–∫–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏: */}
                  <span className="sort__arrow">
                    {column.isSorted
                      ? column.isSortedDesc
                        ? 'ü†ï'
                        : 'ü†ó'
                      : ''}
                  </span>
                </th>
              ))}
            </tr>
          ))}
        </thead>
        <tbody {...getTableBodyProps()}>
          {rows.map(row => {
            prepareRow(row)
            return (
              <tr {...row.getRowProps()}>
                {row.cells.map(cell => {
                  return (
                    <td
                      {...cell.getCellProps()}
                    >
                      {cell.render('Cell')}
                    </td>
                  )
                })}
              </tr>
            )
          })}
        </tbody>
      </table>
    </>
  )
}